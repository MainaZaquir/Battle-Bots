{"ast":null,"code":"var _jsxFileName = \"/home/thenest/Moringa/Development/Code/code-challenges/Code-challenge-5/Battle-Bots/src/App.js\";\nimport React, { Component } from 'react';\nimport BotCollection from './components/BotCollection';\nimport BotArmy from './components/BotArmy';\nimport BotSpecs from './components/BotSpecs';\nimport SortBot from './components/SortBot';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      bots: [],\n      // Array to store all bots from the server\n      army: [],\n      // Array to store enlisted bots\n      selectedBot: null,\n      // Keeps track of the bot selected for detailed view\n      filteredBots: [] // Array to store bots based on filters and sorting\n    };\n    this.addBotToArmy = bot => {\n      // Enlist a bot into the army if it's not already enlisted\n      if (!this.state.army.some(b => b.bot_class === bot.bot_class)) {\n        this.setState(prevState => ({\n          army: [...prevState.army, bot],\n          // Add bot to the army\n          bots: prevState.bots.filter(b => b.id !== bot.id),\n          // Remove bot from the available bots\n          filteredBots: prevState.filteredBots.filter(b => b.id !== bot.id) // Update filteredBots as well\n        }));\n      }\n    };\n    this.releaseBot = bot => {\n      // Release a bot from the army\n      this.setState(prevState => ({\n        army: prevState.army.filter(b => b.id !== bot.id),\n        // Remove bot from the army\n        bots: [...prevState.bots, bot],\n        // Add bot back to the available bots\n        filteredBots: [...prevState.filteredBots, bot] // Update filteredBots as well\n      }));\n    };\n    this.dischargeBot = bot => {\n      // Discharge a bot permanently by deleting it from the backend and removing it from the frontend\n      fetch(`http://localhost:3000/bots/${bot.id}`, {\n        method: 'DELETE'\n      }).then(() => {\n        this.setState(prevState => ({\n          bots: prevState.bots.filter(b => b.id !== bot.id),\n          army: prevState.army.filter(b => b.id !== bot.id),\n          filteredBots: prevState.filteredBots.filter(b => b.id !== bot.id) // Update filteredBots as well\n        }));\n      });\n    };\n    this.selectBot = bot => {\n      // Set the selected bot for detailed view\n      this.setState({\n        selectedBot: bot\n      });\n    };\n    this.sortBot = criteria => {\n      // Sort bots based on the selected criteria (health, damage, armor, name)\n      this.setState(prevState => ({\n        bots: prevState.bots.sort((a, b) => b[criteria] - a[criteria]),\n        filteredBots: prevState.filteredBots.sort((a, b) => b[criteria] - a[criteria]) // Update filteredBots as well\n      }));\n    };\n    this.filterBots = botClass => {\n      // Filter bots based on the selected bot class\n      this.setState(prevState => ({\n        filteredBots: prevState.bots.filter(bot => bot.bot_class === botClass)\n      }));\n    };\n  }\n  componentDidMount() {\n    // Fetching the bots data from the server and initializin state\n    fetch('http://localhost:3000/bots').then(response => response.json()).then(bots => this.setState({\n      bots,\n      filteredBots: bots\n    })); // Initialize filteredBots with all bots\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(SortBot, {\n        sortBots: this.sortBot,\n        filterBots: this.filterBots\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), this.state.selectedBot ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n        bot: this.state.selectedBot,\n        selectBot: this.selectBot,\n        addBotToArmy: this.addBotToArmy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(BotCollection, {\n        bots: this.state.filteredBots,\n        selectBot: this.selectBot,\n        addBotToArmy: this.addBotToArmy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BotArmy, {\n        army: this.state.army,\n        releaseBot: this.releaseBot,\n        dischargeBot: this.dischargeBot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","BotCollection","BotArmy","BotSpecs","SortBot","jsxDEV","_jsxDEV","App","constructor","args","state","bots","army","selectedBot","filteredBots","addBotToArmy","bot","some","b","bot_class","setState","prevState","filter","id","releaseBot","dischargeBot","fetch","method","then","selectBot","sortBot","criteria","sort","a","filterBots","botClass","componentDidMount","response","json","render","children","sortBots","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/thenest/Moringa/Development/Code/code-challenges/Code-challenge-5/Battle-Bots/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport BotCollection from './components/BotCollection';\nimport BotArmy from './components/BotArmy'; \nimport BotSpecs from './components/BotSpecs';\nimport SortBot from './components/SortBot';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    bots: [],               // Array to store all bots from the server\n    army: [],               // Array to store enlisted bots\n    selectedBot: null,      // Keeps track of the bot selected for detailed view\n    filteredBots: [],       // Array to store bots based on filters and sorting\n  };\n\n  componentDidMount() {\n    // Fetching the bots data from the server and initializin state\n    fetch('http://localhost:3000/bots')\n      .then(response => response.json())\n      .then(bots => this.setState({ bots, filteredBots: bots })); // Initialize filteredBots with all bots\n  }\n\n  addBotToArmy = (bot) => {\n    // Enlist a bot into the army if it's not already enlisted\n    if (!this.state.army.some(b => b.bot_class === bot.bot_class)) {\n      this.setState(prevState => ({\n        army: [...prevState.army, bot],                       // Add bot to the army\n        bots: prevState.bots.filter(b => b.id !== bot.id),     // Remove bot from the available bots\n        filteredBots: prevState.filteredBots.filter(b => b.id !== bot.id), // Update filteredBots as well\n      }));\n    }\n  };\n\n  releaseBot = (bot) => {\n    // Release a bot from the army\n    this.setState(prevState => ({\n      army: prevState.army.filter(b => b.id !== bot.id),        // Remove bot from the army\n      bots: [...prevState.bots, bot],                          // Add bot back to the available bots\n      filteredBots: [...prevState.filteredBots, bot],          // Update filteredBots as well\n    }));\n  };\n\n  dischargeBot = (bot) => {\n    // Discharge a bot permanently by deleting it from the backend and removing it from the frontend\n    fetch(`http://localhost:3000/bots/${bot.id}`, { method: 'DELETE' })\n      .then(() => {\n        this.setState(prevState => ({\n          bots: prevState.bots.filter(b => b.id !== bot.id),\n          army: prevState.army.filter(b => b.id !== bot.id),\n          filteredBots: prevState.filteredBots.filter(b => b.id !== bot.id), // Update filteredBots as well\n        }));\n      });\n  };\n\n  selectBot = (bot) => {\n    // Set the selected bot for detailed view\n    this.setState({ selectedBot: bot });\n  };\n\n  sortBot = (criteria) => {\n    // Sort bots based on the selected criteria (health, damage, armor, name)\n    this.setState(prevState => ({\n      bots: prevState.bots.sort((a, b) => b[criteria] - a[criteria]),\n      filteredBots: prevState.filteredBots.sort((a, b) => b[criteria] - a[criteria]), // Update filteredBots as well\n    }));\n  };\n\n  filterBots = (botClass) => {\n    // Filter bots based on the selected bot class\n    this.setState(prevState => ({\n      filteredBots: prevState.bots.filter(bot => bot.bot_class === botClass),\n    }));\n  };\n\n  render() {\n    return (\n      <div>\n        {/* Component to handle sorting and filtering */}\n        <SortBot sortBots={this.sortBot} filterBots={this.filterBots} />\n        \n        {/* Conditional rendering based on whether a bot is selected for detailed view */}\n        {this.state.selectedBot ? (\n          <BotSpecs bot={this.state.selectedBot} selectBot={this.selectBot} addBotToArmy={this.addBotToArmy} />\n        ) : (\n          <BotCollection bots={this.state.filteredBots} selectBot={this.selectBot} addBotToArmy={this.addBotToArmy} />\n        )}\n        \n        {/* Component to display enlisted bots */}\n        <BotArmy army={this.state.army} releaseBot={this.releaseBot} dischargeBot={this.dischargeBot} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}